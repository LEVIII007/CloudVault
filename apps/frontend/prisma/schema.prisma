datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // Relations for cloud storage
  folders       Folder[]  @relation("UserFolders")
  files         File[]    @relation("UserFiles")

  downloads     Int       @default(0) // Number of downloads
  uploads       Int       @default(0) // Number of uploads

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Subscription {
  id          String    @id
  userId      String    @unique
  name        String    @unique       // e.g., "Free", "Premium"
  deadline    DateTime?               // Nullable for unlimited subscriptions
  uploadLimit Int       @default(100) // Default upload limit in MB (modifiable per tier)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Folder {
  id          String    @id @default(cuid())
  name        String
  ownerId     String
  owner       User      @relation("UserFolders", fields: [ownerId], references: [id])
  parentId    String?   // Nullable for root folders
  parent      Folder?   @relation("ParentFolder", fields: [parentId], references: [id])
  subfolders  Folder[]  @relation("ParentFolder")
  files       File[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model File {
  id          String    @id @default(cuid())
  name        String
  type        String    // e.g., "image/png", "application/pdf"
  size        Int       // File size in bytes
  ownerId     String
  owner       User      @relation("UserFiles", fields: [ownerId], references: [id])
  folderId    String?   // Nullable for files not in folders (e.g., root files)
  folder      Folder?   @relation(fields: [folderId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  url         String    // URL for file storage reference (e.g., S3, local path)
}
